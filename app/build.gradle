apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
  compileSdkVersion 23
  buildToolsVersion "23.0.2"

  defaultConfig {
    applicationId "ua.te.hackathon.smartcity2015"
    minSdkVersion 16
    targetSdkVersion 23
    versionCode 1
    versionName "1.0"

    multiDexEnabled = true

    buildConfigField("String", "MAPS_API_KEY", "\"$PROP_MAPS_API_KEY\"")
  }

  signingConfigs {
    debug {
      storeFile file("publish/debug.keystore")
      storePassword "android"
      keyAlias "androiddebugkey"
      keyPassword "android"
    }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    disable "InvalidPackage"
  }

  dexOptions {
    preDexLibraries = false
  }

  packagingOptions {
    exclude "META-INF/ASL2.0"
    exclude "META-INF/DEPENDENCIES.txt"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    exclude "META-INF/NOTICE"
    exclude "META-INF/LICENSE"
    exclude "META-INF/DEPENDENCIES"
    exclude "META-INF/notice.txt"
    exclude "META-INF/license.txt"
    exclude "META-INF/dependencies.txt"
    exclude "META-INF/LGPL2.1"
    exclude "META-INF/services/javax.annotation.processing.Processor"
    exclude "LICENSE.txt"
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }

  lintOptions {
    abortOnError false
  }
}

kapt {
  generateStubs = true
}

dependencies {
  // support for Kotlin language
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

  //multidex support
  compile 'com.android.support:multidex:1.0.1'

  compile fileTree(dir: 'libs', include: ['*.jar'])
  compile "com.android.support:appcompat-v7:$supportLibraryVersion"
  compile "com.android.support:design:$supportLibraryVersion"
  compile "com.android.support:support-v4:$supportLibraryVersion"

  compile 'io.reactivex:rxandroid:1.1.0'
  // Because RxAndroid releases are few and far between, it is recommended you also
  // explicitly depend on RxJava's latest version for bug fixes and new features.
  compile 'io.reactivex:rxjava:1.1.0'

  compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'
  compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'
  compile 'com.squareup.retrofit2:adapter-rxjava:2.0.0-beta4'
  compile 'com.squareup.okhttp3:okhttp:3.1.2'

  // intro screens
  compile 'com.github.JakeWharton:ViewPagerIndicator:2.4.1'
  compile "com.google.android.gms:play-services-auth:$googlePlayServicesVersion"
  // Google Plus
  compile "com.google.android.gms:play-services-plus:$googlePlayServicesVersion"

  // google play services
  compile "com.google.android.gms:play-services-location:$googlePlayServicesVersion"
  compile "com.google.android.gms:play-services-maps:$googlePlayServicesVersion"

  compile 'pl.charmas.android:android-reactive-location:0.8@aar'

  // datetime management
  compile 'net.danlew:android.joda:2.9.2'
  // event bus
  compile 'org.greenrobot:eventbus:3.0.0'
  //realm
  compile 'io.realm:realm-android:0.87.4'
  kapt "io.realm:realm-annotations:0.87.4"
  kapt "io.realm:realm-annotations-processor:0.87.4"

  // dependency injection
  kapt 'com.google.dagger:dagger-compiler:2.0'
  compile 'com.google.dagger:dagger:2.0'
  provided "javax.annotation:jsr250-api:1.0"

  // date and time picker
  compile 'com.wdullaer:materialdatetimepicker:2.1.1'

  // unit test dependencies
  testCompile 'junit:junit:4.12'
}

//==================================================
// Test coverage
//==================================================

apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
    '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
  group = "Reporting"

  description = "Generate Jacoco coverage reports"

  classDirectories = fileTree(
      dir: '../app/build/intermediates/classes/debug',
      excludes: ['**/R.class',
                 '**/R$*.class',
                 '**/*$ViewInjector*.*',
                 '**/*$ViewBinder*.*',   //DI
                 '**/*_MembersInjector*.*',  //DI
                 '**/*_Factory*.*',  //DI
                 '**/stepbystep/model/dto/*.*', //dto model
                 '**/stepbystep/presenter/vo/*.*', //vo model
                 '**/stepbystep/other/**',
                 '**/BuildConfig.*',
                 '**/Manifest*.*',
                 '**/Lambda$*.class',
                 '**/Lambda.class',
                 '**/*Lambda.class',
                 '**/*Lambda*.class']
  )

  additionalSourceDirs = files(coverageSourceDirs)
  sourceDirectories = files(coverageSourceDirs)
  executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

  reports {
    xml.enabled = true
    html.enabled = true
  }

}